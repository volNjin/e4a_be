import Section from "../models/Section.js";
import Course from "../models/Course.js";
import mongoose from "mongoose";
import { markLastAccessedSection, updateProgressOnSectionCompletion } from "./progressService.js";
const sectionService = {
  async getNextSectionOrder(courseId) {
    try {
      const courseObjectId = new mongoose.Types.ObjectId(courseId);

      // Find the maximum order of sections for the given course
      const lastSection = await Section.findOne({ course: courseObjectId })
        .sort({ order: -1 }) // Sort by order in descending order
        .limit(1); // Get only the section with the highest order
      return lastSection ? lastSection.order + 1 : 1;
    } catch (error) {
      throw error;
    }
  },

  // 1. Th√™m m·ªôt section m·ªõi
  async addSection(title, content, courseId, order, video) {
    try {
      const courseObjectId = new mongoose.Types.ObjectId(courseId);
      const newSection = new Section({
        title,
        content,
        course: courseObjectId,
        order,
        video,
      });

      await newSection.save();
      // Find the course and add the new section to its sections array
      const course = await Course.findById(courseObjectId);

      if (!course) {
        throw new Error("Course not found");
      }

      // Append the new section's ObjectId to the sections array
      course.sections.push(newSection._id);

      // Save the updated course document
      await course.save();
      return newSection;
    } catch (error) {
      throw new Error("Failed to add section");
    }
  },

  // 2. L·∫•y t·∫•t c·∫£ sections c·ªßa m·ªôt course, c√≥ ph√¢n lo·∫°i theo th·ª© t·ª±
  async getSectionsByCourse(courseId) {
    try {
      const courseObjectId = new mongoose.Types.ObjectId(courseId);
      const sections = await Section.find(
        { course: courseObjectId },
        { _id: 1, title: 1, order: 1 }
      ).sort({
        order: 1,
      }); // S·∫Øp x·∫øp theo th·ª© t·ª±
      return sections;
    } catch (error) {
      console.log(error);
      throw new Error("Failed to fetch sections");
    }
  },

  async getSectionByCourseAndOrder(userId, courseId, order) {
    try {
      const courseObjectId = new mongoose.Types.ObjectId(courseId);
      const section = await Section.findOne({ course: courseObjectId, order });
      if (!section) {
        return { success: false, message: "Section not found" };
      }
      return {success: true, section: section};
    } catch (error) {
      console.log(error);
      throw new Error("Failed to fetch section");
    }
  },

  // 3. L·∫•y th√¥ng tin section theo id
  async getSection(sectionId) {
    try {
      // üü¢ 1. T√¨m ki·∫øm Section
      const section = await Section.findById(sectionId).populate(
        "course",
        "title"
      );
      if (!section) {
        return { success: false, message: "Section not found" };
      }

      // üü¢ 2. L·∫•y ID c·ªßa kh√≥a h·ªçc3
      const courseId = section.course._id;

      // üü¢ 3. ƒê·∫øm s·ªë l∆∞·ª£ng section trong kh√≥a h·ªçc
      const totalSections = await Section.countDocuments({ course: courseId });

      // üü¢ 4. Tr·∫£ v·ªÅ th√¥ng tin section v√† t·ªïng s·ªë section c·ªßa kh√≥a h·ªçc
      return {
        success: true,
        section: section,
        totalSections: totalSections,
      };
    } catch (error) {
      console.error("Error fetching section: ", error);
      throw new Error("Failed to fetch section");
    }
  },

  // 4. C·∫≠p nh·∫≠t m·ªôt section
  async updateSection(sectionId, title, content, order, video) {
    try {
      const sectionToUpdate = await Section.findById(sectionId);
      if (!sectionToUpdate) {
        return { success: false, message: "Section not found" };
      }

      const course = sectionToUpdate.course;
      const oldOrder = sectionToUpdate.order;
      if (oldOrder !== order) {
        // N·∫øu th·ª© t·ª± thay ƒë·ªïi, c·∫ßn c·∫≠p nh·∫≠t l·∫°i c√°c Section kh√°c trong kh√≥a h·ªçc
        if (oldOrder < order) {
          // N·∫øu oldOrder nh·ªè h∆°n order, gi·∫£m th·ª© t·ª± c√°c Section c√≥ order l·ªõn h∆°n
          await Section.updateMany(
            { course, order: { $gt: oldOrder, $lte: order } },
            { $inc: { order: -1 } }
          );
        } else if (oldOrder > order) {
          // N·∫øu oldOrder l·ªõn h∆°n order, tƒÉng th·ª© t·ª± c√°c Section c√≥ order nh·ªè h∆°n
          await Section.updateMany(
            { course, order: { $lt: oldOrder, $gte: order } },
            { $inc: { order: 1 } }
          );
        }
      }

      // C·∫≠p nh·∫≠t th√¥ng tin c·ªßa Section
      const updatedSection = await Section.findByIdAndUpdate(
        sectionId,
        { title, content, order, video },
        { new: true }
      );

      return { success: true, updatedSection: updatedSection };
    } catch (error) {
      console.log(error);
      throw new Error("Failed to update section");
    }
  },

  // 5. X√≥a m·ªôt section
  async deleteSection(sectionId) {
    try {
      const sectionToDelete = await Section.findById(sectionId);

      if (!sectionToDelete) {
        return { success: false, message: "Section not found" };
      }

      const { course, order } = sectionToDelete;
      // X√≥a section
      await Section.findByIdAndDelete(sectionId);
      await Course.findByIdAndUpdate(
        course,
        { $pull: { sections: sectionId } } // X√≥a sectionId kh·ªèi tr∆∞·ªùng `sections` c·ªßa kh√≥a h·ªçc
      );
      // C·∫≠p nh·∫≠t l·∫°i th·ª© t·ª± c·ªßa c√°c section c√≤n l·∫°i
      await Section.updateMany(
        { course, order: { $gt: order } }, // T√¨m c√°c Section c√≥ th·ª© t·ª± l·ªõn h∆°n th·ª© t·ª± c·ªßa Section b·ªã x√≥a
        { $inc: { order: -1 } } // Gi·∫£m th·ª© t·ª± c·ªßa c√°c Section c√≤n l·∫°i
      );

      return sectionToDelete; // Tr·∫£ v·ªÅ Section ƒë√£ b·ªã x√≥a
    } catch (error) {
      throw new Error("Failed to delete section");
    }
  },
};

export default sectionService;
